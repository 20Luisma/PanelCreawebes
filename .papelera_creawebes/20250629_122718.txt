<?php
session_start();
if (!isset($_SESSION['logueado']) || $_SESSION['logueado'] !== true) {
    header('Location: login.php');
    exit;
}
/* =========================================================
 * Explorador de Archivos ‚Äì Creawebes (versi√≥n 14-jun-2025)
 * Ahora pregunta si se quiere reemplazar cuando al mover
 * existe un archivo o carpeta con el mismo nombre.
 * =======================================================*/

// ---------- Ajustes iniciales ----------
$root            = realpath(__DIR__);     // Carpeta ra√≠z
$carpetaRelativa = $_GET['carpeta'] ?? '';      // Carpeta actual (relativa)
$error           = $_GET['error']    ?? '';      // C√≥digo de error
$rutaActual      = realpath($root . '/' . $carpetaRelativa);
if (!$rutaActual || strpos($rutaActual, $root) !== 0) die("Ruta inv√°lida.");

// Crear carpeta de papelera si no existe
$papelera = $root . '/.papelera_creawebes';
if (!is_dir($papelera)) {
    mkdir($papelera, 0775, true);
    file_put_contents($papelera . '/.htaccess', "Deny from all"); // protege acceso directo
}


// ---------- Helpers ----------
function obtenerRutaRelativa($root, $abs) {
    return ltrim(str_replace($root, '', $abs), '/\\');
}
function iconoArchivo($n) {
    $ext = strtolower(pathinfo($n, PATHINFO_EXTENSION));
    return match ($ext) {
        'jpg','jpeg','png','gif','webp' => 'üñºÔ∏è',
        'pdf'                           => 'üìÑ',
        'php','html','js','css','txt'          => 'üíª', // Agregado 'txt' para el icono de c√≥digo
        'zip','rar'                     => 'üóúÔ∏è',
        'mp3','wav'                     => 'üéµ',
        'mp4','mov'                     => 'üéûÔ∏è',
        default                         => 'üìÑ',
    };
}
function breadcrumb($rel) {
    if (!$rel) return 'üìÅ <strong>Inicio</strong>';
    $p   = explode('/', $rel);
    $out = ['<a href="index.php">Inicio</a>'];
    $acc = [];
    foreach ($p as $seg) {
        $acc[] = $seg;
        $out[] = '<a href="index.php?carpeta=' . urlencode(implode('/', $acc)) . '">' .
                 htmlspecialchars($seg) . '</a>';
    }
    return 'üìÅ ' . implode(' / ', $out);
}
function duplicarCarpeta($src, $dst) {
    mkdir($dst);
    foreach (scandir($src) as $i) {
        if ($i === '.' || $i === '..') continue;
        $s = "$src/$i";
        $d = "$dst/$i";
        is_dir($s) ? duplicarCarpeta($s, $d) : copy($s, $d);
    }
}
/* Elimina recursivamente archivos o carpetas (para sobrescribir) */
function eliminarRecursivo($ruta) {
    if (is_dir($ruta) && !is_link($ruta)) {
        foreach (scandir($ruta) as $i) {
            if ($i === '.' || $i === '..') continue;
            eliminarRecursivo("$ruta/$i");
        }
        rmdir($ruta);
    } elseif (file_exists($ruta)) {
        unlink($ruta);
    }
}
function listarCarpetas($ruta, $base = '', $root = '') {
    $root = $root ?: $ruta;
    $out  = [];
    foreach (scandir($ruta) as $i) {
        if ($i === '.' || $i === '..') continue;
        $abs = "$ruta/$i";
        if (is_dir($abs)) {
            // Asegurarse de no listar la papelera a menos que estemos dentro de ella
            if ($abs === $root . '/.papelera_creawebes' && $base === '') {
                continue;
            }
            $rel  = ltrim("$base/$i", '/');
            $out[] = $rel;
            $out   = array_merge($out, listarCarpetas($abs, $rel, $root));
        }
    }
    return $out;
}

/* ---------- API para <select> de destinos ---------- */
if (isset($_GET['listar'])) {
    header('Content-Type: application/json');
    $todas  = listarCarpetas($root);
    $actual = $_GET['actual'] ?? '';
    echo json_encode(array_values(array_filter(
        array_merge([''], $todas),
        fn($c) => $c !== $actual       // quita la carpeta actual
    )));
    exit;
}

/* ---------- Acciones POST ---------- */
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    $accion      = $_POST['accion']  ?? '';
    $objetivoRel = $_POST['archivo'] ?? ''; // Obtiene la ruta relativa completa del JS
    $rutaObjAbs  = realpath($root . '/' . $objetivoRel); // Ruta absoluta del archivo/carpeta a duplicar

    // Validar que la ruta del objetivo est√© dentro de $root
    if ($objetivoRel && (!$rutaObjAbs || strpos($rutaObjAbs, $root) !== 0)) {
        // Manejar un intento de acceso a rutas fuera del explorador
        header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) . '&error=ruta_invalida');
        exit;
    }


    /* ---------- Subida de archivo ---------- */
    if (isset($_FILES['archivo']) && $_FILES['archivo']['error'] === UPLOAD_ERR_OK) {
        move_uploaded_file($_FILES['archivo']['tmp_name'],
                           $rutaActual . '/' . basename($_FILES['archivo']['name']));
        header('Location: index.php?carpeta=' . urlencode($carpetaRelativa));
        exit;
    }

    /* ---------- Resto de acciones ---------- */
    switch ($accion) {
        case 'vaciar_papelera':
            $clave = $_POST['clave'] ?? '';
            if ($clave !== '2020') {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) . '&error=clave');
                exit;
            }

            $papelera = $root . '/.papelera_creawebes';
            if (is_dir($papelera)) {
                $items = array_diff(scandir($papelera), ['.', '..']);
                foreach ($items as $i) {
                    $ruta = $papelera . '/' . $i;
                    is_file($ruta) ? unlink($ruta) : eliminarRecursivo($ruta);
                }
                // Tambi√©n eliminar el archivo registros.json al vaciar la papelera
                $registrosPath = $papelera . '/registros.json';
                if (file_exists($registrosPath)) {
                    unlink($registrosPath);
                }
            }

            header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) . '&ok=papelera_vaciada');
            exit;

        case 'restaurar': // Restauraci√≥n individual
            $archivoRelEnPapelera = $_POST['archivo'] ?? ''; // Es la ruta relativa dentro de la papelera
            $archivoAbsEnPapelera = realpath($root . '/' . $archivoRelEnPapelera);

            // Validar que el archivo exista y est√© realmente en la papelera
            if (!$archivoAbsEnPapelera || strpos($archivoAbsEnPapelera, $papelera) !== 0) {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) . '&error=ruta_invalida');
                exit;
            }

            $registrosPath = $papelera . '/registros.json';
            $todosLosRegistros = file_exists($registrosPath) ?
                                 array_map('json_decode', file($registrosPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)) :
                                 [];
            $restauradoConExito = false;

            foreach ($todosLosRegistros as $indice => $registro) {
                if (isset($registro['eliminado']) && $registro['eliminado'] === $archivoRelEnPapelera) {
                    $destinoAbs = $root . '/' . $registro['original'];
                    $dirDestino = dirname($destinoAbs);

                    // Asegurarse de que la carpeta de destino exista
                    if (!is_dir($dirDestino)) {
                        mkdir($dirDestino, 0777, true);
                    }

                    // Manejar conflictos: si el archivo ya existe en el destino
                    if (file_exists($destinoAbs)) {
                        $nombreBase = basename($destinoAbs);
                        $extension = pathinfo($nombreBase, PATHINFO_EXTENSION);
                        $nombreSinExt = ($extension === '') ? $nombreBase : substr($nombreBase, 0, -(strlen($extension) + 1));
                        $contador = 1;
                        $nuevoNombreDestino = $destinoAbs;

                        while (file_exists($nuevoNombreDestino)) {
                            $nuevoNombreDestino = $dirDestino . '/' . $nombreSinExt . '_restaurado' . $contador . (($extension === '') ? '' : '.' . $extension);
                            $contador++;
                        }
                        $destinoAbs = $nuevoNombreDestino;
                    }

                    // Intentar mover el archivo
                    if (rename($archivoAbsEnPapelera, $destinoAbs)) {
                        $restauradoConExito = true;
                        // Marcar este registro para ser eliminado del archivo de logs
                        unset($todosLosRegistros[$indice]);
                        break; // Se encontr√≥ y restaur√≥, no buscar m√°s para este archivo
                    }
                }
            }

            // Si se restaur√≥ con √©xito, actualizar el archivo de registros
            if ($restauradoConExito) {
                file_put_contents($registrosPath, implode(PHP_EOL, array_map('json_encode', $todosLosRegistros)) . PHP_EOL);
            }

            header('Location: index.php?carpeta=' . urlencode($carpetaRelativa));
            exit;

        case 'eliminar':
            // Determinar la carpeta de la que se elimina para la redirecci√≥n
            // Si el elemento eliminado es un archivo, la carpeta de redirecci√≥n es su directorio padre
            // Si el elemento eliminado es una carpeta, la carpeta de redirecci√≥n es su directorio padre
            $directorioPadreDelElemento = dirname($rutaObjAbs);
            $carpetaRedireccion = obtenerRutaRelativa($root, $directorioPadreDelElemento);

            // Si ya est√° en la papelera ‚Üí eliminar definitivamente
            if (str_contains($rutaObjAbs, '/.papelera_creawebes')) {
                is_file($rutaObjAbs) ? unlink($rutaObjAbs) : eliminarRecursivo($rutaObjAbs);

                // Despu√©s de eliminar de la papelera, tambi√©n se debe eliminar su registro si existe
                $registrosPath = $papelera . '/registros.json';
                if (file_exists($registrosPath)) {
                    $todosLosRegistros = array_map('json_decode', file($registrosPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES));
                    $registrosActualizados = array_filter($todosLosRegistros, function($registro) use ($objetivoRel) {
                        return !isset($registro['eliminado']) || $registro['eliminado'] !== $objetivoRel;
                    });
                    file_put_contents($registrosPath, implode(PHP_EOL, array_map('json_encode', $registrosActualizados)) . PHP_EOL);
                }

                // Si eliminamos desde la papelera, nos quedamos en la papelera
                $carpetaRedireccion = '.papelera_creawebes';
            } else {
               // Caso normal: mover a la papelera
                $destinoPapelera = $root . '/.papelera_creawebes/' . basename($rutaObjAbs);
                // Si ya existe un archivo con el mismo nombre en la papelera, a√±adir un timestamp
                if (file_exists($destinoPapelera)) {
                    $destinoPapelera = $root . '/.papelera_creawebes/' . time() . '_' . basename($rutaObjAbs);
                }
                rename($rutaObjAbs, $destinoPapelera);

                // Registrar en logs
                $registro = [
                    'original'  => obtenerRutaRelativa($root, $rutaObjAbs),
                    'eliminado' => obtenerRutaRelativa($root, $destinoPapelera),
                    'fecha'     => date('Y-m-d H:i:s')
                ];
                file_put_contents(
                    $root . '/.papelera_creawebes/registros.json',
                    json_encode($registro, JSON_UNESCAPED_UNICODE) . PHP_EOL,
                    FILE_APPEND
                );
            }
            // Redirige a la carpeta donde se realiz√≥ la eliminaci√≥n (el padre del elemento)
            header('Location: index.php?carpeta=' . urlencode($carpetaRedireccion));
            exit;

        case 'renombrar':
            $nuevo = basename($_POST['nuevo_nombre']); // Esto sigue siendo correcto para el nombre final
            // Construir la ruta de destino para el renombrado
            $rutaDestinoRenombrar = dirname($rutaObjAbs) . '/' . $nuevo;

            if (!file_exists($rutaDestinoRenombrar)) {
                rename($rutaObjAbs, $rutaDestinoRenombrar);
            } else {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                       '&error=existe');
                exit;
            }
            break;

        case 'duplicar':
            // $objetivoRel ya contiene la ruta relativa del item (ej. "carpeta/mi_archivo.txt")
            $nombreBaseObjetivo = basename($rutaObjAbs); // Obtener solo el nombre del archivo/carpeta
            $directorioOriginal = dirname($rutaObjAbs); // Directorio donde est√° el archivo/carpeta original

            $copia = $directorioOriginal . '/copia_' . $nombreBaseObjetivo;

            if (!file_exists($copia)) {
                if (is_file($rutaObjAbs)) {
                    copy($rutaObjAbs, $copia);
                } elseif (is_dir($rutaObjAbs)) {
                    duplicarCarpeta($rutaObjAbs, $copia);
                }
                // Redirigir a la carpeta donde se cre√≥ la copia
                $carpetaDestinoDuplicado = obtenerRutaRelativa($root, $directorioOriginal);
                header('Location: index.php?carpeta=' . urlencode($carpetaDestinoDuplicado));
                exit;
            } else {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                       '&error=existe');
                exit;
            }
            break;

        case 'crear_carpeta':
            $nombre = basename($_POST['nueva_carpeta']);
            if (!file_exists($rutaActual . '/' . $nombre)) {
                mkdir($rutaActual . '/' . $nombre);
            } else {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                       '&error=existe');
                exit;
            }
            break;

        case 'crear_archivo':
            $nombreArchivo = basename($_POST['nombre_archivo']);
            $contenido     = $_POST['contenido'] ?? '';
            if (!file_exists($rutaActual . '/' . $nombreArchivo)) {
                file_put_contents($rutaActual . '/' . $nombreArchivo, $contenido);
            } else {
                header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                       '&error=existe');
                exit;
            }
            break;

        /* ---------- Mover archivo / carpeta individual ---------- */
        case 'mover':
            $destinoRel   = trim($_POST['destino'] ?? '');
            $rutaDestAbs  = $destinoRel === '' ? $root
                                                 : realpath($root . '/' . $destinoRel);
            // $objetivo ahora es la ruta relativa completa (ej. "carpeta/mi_archivo.txt")
            $nombreBaseParaDestino = basename($rutaObjAbs); // Nombre del archivo/carpeta
            
            if ($rutaDestAbs && strpos($rutaDestAbs, $root) === 0 &&
                realpath($rutaDestAbs) !== realpath(dirname($rutaObjAbs))) { // Comprobar que no sea el mismo directorio

                $nuevaRutaAbs = $rutaDestAbs . '/' . $nombreBaseParaDestino;
                $forzar       = ($_POST['forzar'] ?? '') === '1';

                if (file_exists($nuevaRutaAbs) && !$forzar) {
                    /* Conflicto ‚Üí redirige para preguntar */
                    header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                                 '&error=conflicto&archivo=' . urlencode($objetivoRel) . // Usar objetivoRel aqu√≠
                                 '&destino=' . urlencode($destinoRel));
                    exit;
                }

                /* Si forzar o no existe destino ‚Üí mover */
                if (file_exists($nuevaRutaAbs) && $forzar) {
                    eliminarRecursivo($nuevaRutaAbs);
                }
                rename($rutaObjAbs, $nuevaRutaAbs);

                /* Muestra ahora la carpeta destino */
                header('Location: index.php?carpeta=' . urlencode($destinoRel));
                exit;
            }
            break;

        case 'restaurar_multiple':
            $archivosJson = $_POST['archivos_json'] ?? '[]';
            $archivosSeleccionados = json_decode($archivosJson, true); // Nombres relativos de los archivos a restaurar

            $registrosPath = $papelera . '/registros.json';
            // Cargar todos los registros existentes
            $todosLosRegistros = file_exists($registrosPath) ?
                                 array_map('json_decode', file($registrosPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)) :
                                 [];

            $registrosRestauradosConExito = []; // Para almacenar los 'eliminado' de los archivos restaurados con √©xito

            foreach ($archivosSeleccionados as $archivoRelativoEnPapelera) {
                $restauradoEnEsteCiclo = false;
                // Buscar el registro correspondiente al archivo seleccionado en la lista completa
                foreach ($todosLosRegistros as $indice => $registro) {
                    if (isset($registro['eliminado']) && $registro['eliminado'] === $archivoRelativoEnPapelera) {
                        $archivoAbsEnPapelera = realpath($root . '/' . $registro['eliminado']);

                        // Validar que el archivo exista y est√© realmente en la papelera
                        if ($archivoAbsEnPapelera && strpos($archivoAbsEnPapelera, $papelera) === 0) {
                            $destinoAbs = $root . '/' . $registro['original'];
                            $dirDestino = dirname($destinoAbs);

                            // Crear la estructura de directorios si no existe
                            if (!is_dir($dirDestino)) {
                                mkdir($dirDestino, 0777, true);
                            }

                            // Manejar colisiones de nombres: a√±adir _restauradoX
                            if (file_exists($destinoAbs)) {
                                $nombreBase = basename($destinoAbs);
                                $extension = pathinfo($nombreBase, PATHINFO_EXTENSION);
                                $nombreSinExt = ($extension === '') ? $nombreBase : substr($nombreBase, 0, -(strlen($extension) + 1));
                                $contador = 1;
                                $nuevoNombreDestino = $destinoAbs;

                                while (file_exists($nuevoNombreDestino)) {
                                    $nuevoNombreDestino = $dirDestino . '/' . $nombreSinExt . '_restaurado' . $contador . (($extension === '') ? '' : '.' . $extension);
                                    $contador++;
                                }
                                $destinoAbs = $nuevoNombreDestino;
                            }

                            // Mover el archivo de la papelera a su destino final
                            if (rename($archivoAbsEnPapelera, $destinoAbs)) {
                                $registrosRestauradosConExito[] = $registro['eliminado']; // A√±adir a la lista de restaurados exitosos
                                $restauradoEnEsteCiclo = true;
                                break; // Ya se proces√≥ este archivo, salir del bucle interno
                            }
                        }
                    }
                }
            }

            // Filtrar los registros: solo mantener aquellos que NO fueron restaurados con √©xito
            $registrosActualizados = array_filter($todosLosRegistros, function($registro) use ($registrosRestauradosConExito) {
                // Verificar si 'eliminado' existe antes de usarlo en in_array
                return !isset($registro['eliminado']) || !in_array($registro['eliminado'], $registrosRestauradosConExito);
            });

            // Convertir los objetos de nuevo a JSON y guardarlos en el archivo
            file_put_contents($registrosPath, implode(PHP_EOL, array_map('json_encode', $registrosActualizados)) . PHP_EOL);

            // Redirigir de vuelta a la papelera (o a donde quieras)
            header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) . '&ok=restaurados');
            exit;

        case 'eliminar_multiple':
            $archivosJson = $_POST['archivos_json'] ?? '[]';
            $archivos     = json_decode($archivosJson, true);

            // Se asume que todos los archivos seleccionados para eliminar m√∫ltiple est√°n en la misma carpeta
            // Por lo tanto, la redirecci√≥n ser√° al padre del primer archivo (o a la carpeta actual si no hay archivos)
            $carpetaRedireccion = $carpetaRelativa;
            if (!empty($archivos)) {
                $primerArchivoAbs = realpath($root . '/' . $archivos[0]);
                if ($primerArchivoAbs && strpos($primerArchivoAbs, $root) === 0) {
                    $carpetaRedireccion = obtenerRutaRelativa($root, dirname($primerArchivoAbs));
                }
            }

            // Leer todos los registros de la papelera para una posible actualizaci√≥n
            $registrosPath = $papelera . '/registros.json';
            $todosLosRegistros = file_exists($registrosPath) ?
                                 array_map('json_decode', file($registrosPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)) :
                                 [];
            $registrosParaMantener = []; // Nueva lista de registros

            foreach ($archivos as $relativo) {
                $abs = realpath($root . '/' . $relativo);
                if (!$abs || strpos($abs, $root) !== 0) continue;

                $fueEliminadoDefinitivamente = false;

                // Si ya est√° en la papelera ‚Üí eliminar de verdad
                if (str_contains($abs, '/.papelera_creawebes')) {
                    is_file($abs) ? unlink($abs) : eliminarRecursivo($abs);
                    $fueEliminadoDefinitivamente = true;
                    // Si eliminamos desde la papelera, nos quedamos en la papelera
                    $carpetaRedireccion = '.papelera_creawebes';
                } else {
                    // Si no ‚Üí mover a papelera
                    $destino = $root . '/.papelera_creawebes/' . basename($abs);
                    if (file_exists($destino)) {
                        $destino = $root . '/.papelera_creawebes/' . time() . '_' . basename($abs);
                    }
                    rename($abs, $destino);

                    // Registrar en logs
                    $registro = [
                        'original'  => obtenerRutaRelativa($root, $abs),
                        'eliminado' => obtenerRutaRelativa($root, $destino),
                        'fecha'     => date('Y-m-d H:i:s')
                    ];
                    // Esto se a√±ade al final despu√©s del bucle si queremos una escritura √∫nica.
                    // Para m√∫ltiple eliminaci√≥n, cada uno se registra individualmente.
                    file_put_contents(
                        $root . '/.papelera_creawebes/registros.json',
                        json_encode($registro, JSON_UNESCAPED_UNICODE) . PHP_EOL,
                        FILE_APPEND
                    );
                }
            }

            // Si se eliminaron definitivamente archivos de la papelera, actualizar el archivo de registros
            if ($carpetaRelativa === '.papelera_creawebes') {
                $archivosEliminadosRelativos = array_map(function($path) use ($root, $papelera) {
                    return obtenerRutaRelativa($root, $papelera . '/' . basename($path));
                }, $archivos);

                $registrosActualizados = array_filter($todosLosRegistros, function($registro) use ($archivosEliminadosRelativos) {
                    return !isset($registro['eliminado']) || !in_array($registro['eliminado'], $archivosEliminadosRelativos);
                });
                file_put_contents($registrosPath, implode(PHP_EOL, array_map('json_encode', $registrosActualizados)) . PHP_EOL);
            }

            // Redirige a la carpeta donde se realiz√≥ la eliminaci√≥n (el padre de los elementos)
            header('Location: index.php?carpeta=' . urlencode($carpetaRedireccion));
            exit;

        /* ---------- Mover M√∫ltiple ---------- */
        case 'mover_multiple':
            $destinoRel   = trim($_POST['destino'] ?? '');
            $archivosJson = $_POST['archivos_json'] ?? '[]';
            $forzar       = ($_POST['forzar'] ?? '') === '1';

            $archivos     = json_decode($archivosJson, true);
            $rutaDestAbs  = $destinoRel === '' ? $root : realpath($root . '/' . $destinoRel);

            if (!is_array($archivos)) {
                break;
            }

            if ($rutaDestAbs && strpos($rutaDestAbs, $root) === 0) {
                $conflictos = [];

                foreach ($archivos as $nombreRelativo) {
                    $origenAbs = realpath($root . '/' . $nombreRelativo);
                    $nombre    = basename($nombreRelativo);
                    $destAbs   = $rutaDestAbs . '/' . $nombre;

                    if (!$origenAbs || strpos($origenAbs, $root) !== 0) continue;

                    if (file_exists($destAbs) && !$forzar) {
                        $conflictos[] = $nombreRelativo;
                        continue;
                    }

                    if (file_exists($destAbs) && $forzar) {
                        eliminarRecursivo($destAbs);
                    }

                    rename($origenAbs, $destAbs);
                }

                if (!$forzar && !empty($conflictos)) {
                    header('Location: index.php?carpeta=' . urlencode($carpetaRelativa) .
                                 '&error=conflicto_multiple&archivos=' . urlencode(json_encode($conflictos)) .
                                 '&destino=' . urlencode($destinoRel));
                    exit;
                }

                header('Location: index.php?carpeta=' . urlencode($destinoRel));
                exit;
            }
            break;

    }

    /* Todas las acciones que llegan aqu√≠ vuelven a la carpeta actual, excepto duplicar */
    // NOTA: Esta l√≠nea ya no ser√° alcanzada por 'eliminar' o 'eliminar_multiple'
    // porque ahora tienen su propio exit;
    header('Location: index.php?carpeta=' . urlencode($carpetaRelativa));
    exit;
}

/* ---------- Listado de elementos ----------
    (s√≥lo HTML a partir de aqu√≠) */
$orden = $_GET['orden'] ?? 'nombre';
$dir   = $_GET['dir'] ?? 'asc'; // asc o desc
$items = array_filter(scandir($rutaActual), function($i) use ($rutaActual, $root) {
    if ($i === '.' || $i === '..') return false;
    if ($i === '.papelera_creawebes' && $rutaActual !== $root) return false;
    return true;
});

usort($items, function ($a, $b) use ($rutaActual, $orden, $dir) {
    $pa = $rutaActual . '/' . $a;
    $pb = $rutaActual . '/' . $b;

    $esDirA = is_dir($pa);
    $esDirB = is_dir($pb);

    // Carpetas primero
    if ($esDirA && !$esDirB) return -1;
    if (!$esDirA && $esDirB) return 1;

    // Comparaci√≥n seg√∫n orden
    switch ($orden) {
        case 'fecha':
            $res = filemtime($pa) <=> filemtime($pb);
            break;
        case 'tipo':
            $extA = strtolower(pathinfo($a, PATHINFO_EXTENSION));
            $extB = strtolower(pathinfo($b, PATHINFO_EXTENSION));
            $res = $extA <=> $extB;
            if ($res === 0) $res = strcasecmp($a, $b);
            break;
        case 'nombre':
        default:
            $res = strcasecmp($a, $b);
    }

    return $dir === 'desc' ? -$res : $res;
});

?>
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Explorador ‚Äì <?= htmlspecialchars($carpetaRelativa ?: 'Inicio') ?></title>
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap" rel="stylesheet">
<style>
    body{font-family:'Lato',sans-serif;background:#e3f2fd;margin:0;padding:3rem;color:#222}
    .titulo-principal{text-align:center;font-size:4rem;margin-bottom:1rem;color:#3949ab}
    .explorador {
        max-width: 1100px;
        background: #fff;
        border: 1px solid #ccc;
        padding: 3rem;
        border-radius: 1.5rem;
        margin: auto;
        box-shadow: 0 0 25px rgba(0, 0, 0, .06);
    }
    .volver {
    margin-top: 2rem;
    font-size: 1rem;
    }
    .volver a {
    color: #3949ab;
    text-decoration: none;
    font-weight: bold;
    }
    .breadcrumb{margin-bottom:1rem;font-size:.95rem;color:#555}
    .breadcrumb a{color:#3949ab;text-decoration:none}
    .error{background:#ffdede;color:#b20000;padding:.8rem;border-radius:.5rem;margin-bottom:1rem}
    .acciones-top{margin:1.5rem 0}
    ul{list-style:none;padding:0;margin:0;display:flex;flex-wrap:wrap;gap:1rem}
    li{background:#f0f4ff;padding:.8rem 1rem;border-radius:.5rem;min-width:240px;position:relative;cursor:context-menu}
    li img.preview{display:none;position:absolute;max-width:200px;top:2.5rem;left:0;box-shadow:0 0 10px rgba(0,0,0,.2);border-radius:.3rem;z-index:999}
    li:hover img.preview{display:block}
    .menu{position:absolute;z-index:999;background:#fff;border:1px solid #ccc;border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.1);display:none}
    .menu button{display:block;background:none;border:none;padding:.3rem 1rem;width:100%;text-align:left;cursor:pointer}
    .menu button:hover{background:#eee}
    .btn-top{margin:.3rem 0;background:#3949ab;color:#fff;border:none;padding:.5rem 1rem;border-radius:.4rem;cursor:pointer}
    .modal{display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:#0008;justify-content:center;align-items:center}
    .modal-content{background:white;padding:2rem;border-radius:10px;width:90%;max-width:500px}
    .footer{text-align:center;padding:2rem;color:#888;font-size:0.9rem}

#btnAlfred {
    position: fixed;
    bottom: 100px;
    right: 2rem;
    background-color: #3949ab;
    color: white;
    font-size: 0.9rem;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 999px;
    text-decoration: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    z-index: 999;
    transition: background-color 0.3s;
}
#btnAlfred:hover {
    background-color: #303f9f;
}
li.seleccionado {
    background: #dbeafe;
    border: 2px solid #3949ab;
}
</style>
</head>
<body>


<div style="text-align:right; margin-top:-3rem; margin-bottom:2rem;">
    <a href="logout.php" style="color:#3949ab; font-weight:bold; text-decoration:none;">üîì Cerrar sesi√≥n</a>
</div>
<div class="explorador">
    <h1>üìÅ Explorador de Archivos</h1>

    <div class="breadcrumb"><?= breadcrumb($carpetaRelativa) ?></div>

    <?php if ($error === 'existe'): ?>
        <div class="error">‚ùå Ya existe un archivo o carpeta con ese nombre.</div>
    <?php endif; ?>
    <?php if ($error === 'ruta_invalida'): ?>
        <div class="error">‚ùå Error: Ruta no v√°lida o fuera del alcance permitido.</div>
    <?php endif; ?>

    <?php if ($error === 'clave'): ?>
        <div class="error">‚ùå Contrase√±a incorrecta.</div>
    <?php endif; ?>

    <?php if (isset($_GET['ok']) && $_GET['ok'] === 'papelera_vaciada'): ?>
        <div style="background:#e8f5e9;color:#2e7d32;padding:.8rem;border-radius:.5rem;margin-bottom:1rem;">
            ‚úÖ Papelera vaciada correctamente.
        </div>
    <?php endif; ?>

    <div class="acciones-top">
        <button class="btn-top" onclick="crearCarpeta()">üìÅ Nueva carpeta</button>
        <button class="btn-top" onclick="mostrarSubida()">üì§ Subir archivo</button>
        <button class="btn-top" onclick="window.open('https://contenido.creawebes.com/CrearNuevo%20Archivo.php?carpeta=<?= urlencode($carpetaRelativa) ?>', '_blank')">üìù Crear documento</button>
        <button class="btn-top" onclick="window.open('https://script.google.com/macros/s/AKfycbwUfLvcB_o9k3fMW52Iz984UoFN6TYc0K9ntPpq1_MbA-Drvj_MOn4ur0-6aDkfu_x8/exec', '_blank')">üìÖ Agenda</button>
        <button class="btn-top" onclick="abrirWhatsapp()">üí¨ WhatsApp Web</button>
        <form action="buscar.php" method="get" style="margin: 2rem 0 1rem 0;">
            <input type="text" name="q" id="buscador" placeholder="üîç Buscar archivo o carpeta..." style="width: 100%; padding: 0.6rem; border-radius: 6px; border: 1px solid #ccc;">
        </form>
        <div id="resultadosBusqueda" style="margin-top: 2rem;"></div>
    </div>

    <div id="subida" style="display:none;margin:1rem 0;">
        <form method="POST" enctype="multipart/form-data">
            <input type="file" name="archivo" required style="margin-right:1rem;">
            <button type="submit">‚¨ÜÔ∏è Subir</button>
        </form>
    </div>

    <div class="acciones-top" style="display: flex; flex-wrap: wrap; gap: 1rem; align-items: center; margin-bottom: 1.5rem;">
        <div style="position: relative;">
            <button class="btn-top" onclick="toggleMenuOrden()">Ordenar ‚ñæ</button>
            <div id="menuOrden" style="display:none;position:absolute;background:#f9f9f9;border:1px solid #ddd;padding:.3rem .8rem;border-radius:.3rem;box-shadow:none;z-index:1000;">
                <?php
                    $orden = $_GET['orden'] ?? 'nombre';
                    $dir   = $_GET['dir'] ?? 'asc';
                    $base  = 'index.php?carpeta=' . urlencode($carpetaRelativa);

                    function linkOrden($nombre, $campo, $dir, $actualOrden, $actualDir, $base) {
                        $activo = ($campo === $actualOrden && $dir === $actualDir) ? 'font-weight:bold;color:#3949ab;' : 'color:#333;';
                        $url = "$base&orden=$campo&dir=$dir";
                        return "<div style='margin: .2rem 0;'><a href=\"$url\" style=\"$activo text-decoration:none; display:block; padding:.2rem 0; font-size: 0.95rem; font-family: Lato, sans-serif;\">$nombre</a></div>";
                    }

                    echo linkOrden('Nombre (A-Z)', 'nombre', 'asc', $orden, $dir, $base);
                    echo linkOrden('Nombre (Z-A)', 'nombre', 'desc', $orden, $dir, $base);
                    echo linkOrden('Tipo (A-Z)', 'tipo', 'asc', $orden, 'desc', $base);
                    echo linkOrden('Tipo (Z-A)', 'tipo', 'desc', $orden, $dir, $base);
                    echo linkOrden('Fecha (recientes primero)', 'fecha', 'desc', $orden, $dir, $base);
                    echo linkOrden('Fecha (m√°s antiguas)', 'fecha', 'asc', $orden, $dir, $base);
                ?>
            </div>
        </div>

        <form id="backupForm" method="POST" action="backup.php">
            <input type="hidden" name="accion" value="backup">
            <button class="btn-top" type="submit" onclick="return confirm('¬øCrear copia de seguridad?')">
                ‚ôªÔ∏è Copia de seguridad
            </button>
        </form>

        <form method="GET" action="restaurar.php" style="display:inline;">
            <button class="btn-top" type="submit" onclick="return confirm('¬øIr a restaurar una copia?')">
                üîÑ Restaurar copia
            </button>
        </form>

        <?php if ($carpetaRelativa === '.papelera_creawebes'): ?>
            <form method="post" style="margin: 1rem 0;"
                  onsubmit="return confirm('¬øVaciar la papelera permanentemente?')">
                <input type="hidden" name="accion" value="vaciar_papelera">
                
                <div style="display:inline-flex; align-items:center; gap:.5rem;">
                    <input type="password" name="clave" id="claveInput" placeholder="Contrase√±a" required
                               style="padding:.3rem;">
                    <button type="button"
                                onclick="document.getElementById('claveInput').type = 
                                        document.getElementById('claveInput').type === 'password' ? 'text' : 'password'"
                                style="padding:.3rem; background:#eee; border:1px solid #ccc; border-radius:4px; cursor:pointer;">
                        üëÅÔ∏è Mostrar/Ocultar
                    </button>
                </div>

                <button type="submit"
                                style="background:#d32f2f;color:white;padding:.5rem 1rem;border:none;border-radius:5px;cursor:pointer;margin-top:.8rem;">
                    üßπ Vaciar papelera
                </button>
            </form>
        <?php endif; ?>
    </div>

    <ul class="explorador">
    <?php foreach ($items as $item):
        $rutaCompleta = $rutaActual . '/' . $item;
        $relativa       = obtenerRutaRelativa($root, $rutaCompleta);
        $dir            = is_dir($rutaCompleta);
        $esImagen       = !$dir && preg_match('/\.(jpe?g|png|gif|webp)$/i', $item);
    ?>
        <li class="<?= $dir ? 'carpeta' : 'archivo' ?>"
            data-nombre="<?= htmlspecialchars($relativa) ?>"
            title="<?= htmlspecialchars($item) ?>">
            
            <div style="display:flex; align-items:center; gap:.5rem; cursor:pointer;" onclick="seleccionarItem(this)">
                <input type="checkbox" class="selector-item" data-ruta="<?= htmlspecialchars($relativa) ?>">
                <?php if ($dir): ?>
                    <a href="index.php?carpeta=<?= urlencode($relativa) ?>" style="text-decoration:none; color:inherit;">
                        üìÅ <?= htmlspecialchars($item) ?>
                    </a>
                <?php else: ?>
                    <?= iconoArchivo($item) ?>
                    <span><?= htmlspecialchars($item) ?></span>
                    <?php if ($esImagen): ?>
                        <img src="<?= htmlspecialchars($relativa) ?>" class="preview" alt="Preview">
                    <?php endif; ?>
                <?php endif; ?>
            </div>

            <div style="margin-top:.5rem;">
                <button onclick="mostrarMenuContextual(event, '<?= htmlspecialchars($relativa) ?>', <?= $dir ? 'true' : 'false' ?>)"
                        style="background:#eee;border:1px solid #ccc;border-radius:4px;cursor:pointer;font-size:0.8em;padding:0.2em 0.5em;">
                    ‚öôÔ∏è Acciones
                </button>
            </div>
        </li>
    <?php endforeach; ?>
    <?php if (empty($items)): ?>
        <li style="width:100%; text-align:center; color:#888;">No hay elementos en esta carpeta.</li>
    <?php endif; ?>
    </ul>
</div>

<div class="volver">
    <?php if ($carpetaRelativa): ?>
        <a href="index.php?carpeta=<?= urlencode(dirname($carpetaRelativa)) ?>">‚¨ÜÔ∏è Volver</a>
    <?php endif; ?>
</div>

<div id="menuContextual" class="menu">
    <button onclick="abrir()">Abrir</button>
    <button onclick="renombrar()">Renombrar</button>
    <button onclick="duplicar()">Duplicar</button>
    <button onclick="mover()">Mover</button>
    <button onclick="eliminar()">Eliminar</button>
    <?php if ($carpetaRelativa === '.papelera_creawebes'): ?>
        <button onclick="restaurar()">Restaurar</button>
    <?php endif; ?>
</div>

<div id="modalRenombrar" class="modal">
    <div class="modal-content">
        <h2>Renombrar</h2>
        <form id="formRenombrar" method="POST">
            <input type="hidden" name="accion" value="renombrar">
            <input type="hidden" name="archivo" id="renombrarArchivo">
            <input type="text" name="nuevo_nombre" id="nuevoNombre" required style="width:100%;padding:0.5rem;margin-bottom:1rem;">
            <button type="submit" class="btn-top">Guardar</button>
            <button type="button" class="btn-top" onclick="cerrarModal('modalRenombrar')">Cancelar</button>
        </form>
    </div>
</div>

<div id="modalMover" class="modal">
    <div class="modal-content">
        <h2>Mover a...</h2>
        <form id="formMover" method="POST">
            <input type="hidden" name="accion" value="mover">
            <input type="hidden" name="archivo" id="moverArchivo">
            <input type="hidden" name="forzar" id="moverForzar" value="0">
            <p>Selecciona una carpeta de destino:</p>
            <select name="destino" id="moverDestino" style="width:100%;padding:0.5rem;margin-bottom:1rem;"></select>
            <button type="submit" class="btn-top">Mover</button>
            <button type="button" class="btn-top" onclick="cerrarModal('modalMover')">Cancelar</button>
        </form>
    </div>
</div>

<?php if ($error === 'conflicto' && isset($_GET['archivo']) && isset($_GET['destino'])): ?>
    <div id="modalConflicto" class="modal" style="display:flex;">
        <div class="modal-content">
            <h2>Conflicto al Mover</h2>
            <p>Ya existe un elemento llamado "<?= htmlspecialchars(basename($_GET['archivo'])) ?>" en "<?= htmlspecialchars($_GET['destino'] === '' ? 'Inicio' : $_GET['destino']) ?>".</p>
            <p>¬øQu√© quieres hacer?</p>
            <form method="POST" style="display:inline;">
                <input type="hidden" name="accion" value="mover">
                <input type="hidden" name="archivo" value="<?= htmlspecialchars($_GET['archivo']) ?>">
                <input type="hidden" name="destino" value="<?= htmlspecialchars($_GET['destino']) ?>">
                <input type="hidden" name="forzar" value="1">
                <button type="submit" class="btn-top" style="background:#dc3545;">Sobrescribir</button>
            </form>
            <button type="button" class="btn-top" onclick="window.location.href='index.php?carpeta=<?= urlencode($carpetaRelativa) ?>'">Cancelar</button>
        </div>
    </div>
<?php endif; ?>

<?php if ($error === 'conflicto_multiple' && isset($_GET['archivos']) && isset($_GET['destino'])):
    $archivosEnConflicto = json_decode($_GET['archivos'], true);
?>
    <div id="modalConflictoMultiple" class="modal" style="display:flex;">
        <div class="modal-content">
            <h2>Conflicto al Mover M√∫ltiple</h2>
            <p>Los siguientes elementos ya existen en "<?= htmlspecialchars($_GET['destino'] === '' ? 'Inicio' : $_GET['destino']) ?>":</p>
            <ul>
                <?php foreach ($archivosEnConflicto as $archivoConflicto): ?>
                    <li><?= htmlspecialchars(basename($archivoConflicto)) ?></li>
                <?php endforeach; ?>
            </ul>
            <p>¬øQuieres sobrescribirlos?</p>
            <form method="POST" style="display:inline;">
                <input type="hidden" name="accion" value="mover_multiple">
                <input type="hidden" name="archivos_json" value="<?= htmlspecialchars($_GET['archivos']) ?>">
                <input type="hidden" name="destino" value="<?= htmlspecialchars($_GET['destino']) ?>">
                <input type="hidden" name="forzar" value="1">
                <button type="submit" class="btn-top" style="background:#dc3545;">Sobrescribir Todos</button>
            </form>
            <button type="button" class="btn-top" onclick="window.location.href='index.php?carpeta=<?= urlencode($carpetaRelativa) ?>'">Cancelar</button>
        </div>
    </div>
<?php endif; ?>

<div id="btnAlfred" style="display:none;position:fixed;bottom:20px;right:20px;">
    <button class="btn-top" onclick="mostrarModalMoverMultiple()">Mover seleccionados</button>
    <button class="btn-top" onclick="eliminarMultiple()" style="background:#dc3545;">Eliminar seleccionados</button>
    <?php if ($carpetaRelativa === '.papelera_creawebes'): ?>
        <button class="btn-top" onclick="restaurarMultiple()">Restaurar seleccionados</button>
    <?php endif; ?>
</div>

<div id="modalMoverMultiple" class="modal">
    <div class="modal-content">
        <h2>Mover seleccionados a...</h2>
        <form id="formMoverMultiple" method="POST">
            <input type="hidden" name="accion" value="mover_multiple">
            <input type="hidden" name="archivos_json" id="moverMultipleArchivos">
            <input type="hidden" name="forzar" id="moverMultipleForzar" value="0">
            <p>Selecciona una carpeta de destino:</p>
            <select name="destino" id="moverMultipleDestino" style="width:100%;padding:0.5rem;margin-bottom:1rem;"></select>
            <button type="submit" class="btn-top">Mover</button>
            <button type="button" class="btn-top" onclick="cerrarModal('modalMoverMultiple')">Cancelar</button>
        </form>
    </div>
</div>

<script>
let archivoSeleccionado = ''; // Para acciones individuales (renombrar, eliminar, etc.)
let esCarpeta = false; // Para acciones individuales

// Funci√≥n para mostrar el men√∫ contextual
function mostrarMenuContextual(event, archivo, isDir) {
    event.preventDefault(); // Evita el men√∫ contextual del navegador
    archivoSeleccionado = archivo;
    esCarpeta = isDir;

    const menu = document.getElementById('menuContextual');
    menu.style.display = 'block';
    menu.style.left = event.pageX + 'px';
    menu.style.top = event.pageY + 'px';

    // Ocultar/mostrar el bot√≥n de restaurar si estamos en la papelera
    const restoreButton = menu.querySelector('button[onclick="restaurar()"]');
    if (restoreButton) {
        if ('<?= $carpetaRelativa ?>' === '.papelera_creawebes') {
            restoreButton.style.display = 'block';
        } else {
            restoreButton.style.display = 'none';
        }
    }
}

// Ocultar el men√∫ contextual al hacer clic en cualquier lugar
document.addEventListener('click', function(event) {
    const menu = document.getElementById('menuContextual');
    if (menu.style.display === 'block' && !menu.contains(event.target)) {
        menu.style.display = 'none';
    }
});

function abrir() {
    if (esCarpeta) {
        window.location.href = 'index.php?carpeta=' + encodeURIComponent(archivoSeleccionado);
    } else {
        window.open(archivoSeleccionado, '_blank');
    }
    cerrarModal('menuContextual');
}

function renombrar() {
    const modal = document.getElementById('modalRenombrar');
    document.getElementById('renombrarArchivo').value = archivoSeleccionado;
    document.getElementById('nuevoNombre').value = archivoSeleccionado.split('/').pop(); // Obtener solo el nombre del archivo/carpeta
    modal.style.display = 'flex';
    cerrarModal('menuContextual');
}

function duplicar() {
    if (confirm('¬øEst√°s seguro de que quieres duplicar "' + archivoSeleccionado.split('/').pop() + '"?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'duplicar';
        form.appendChild(inputAccion);
        const inputArchivo = document.createElement('input');
        inputArchivo.type = 'hidden';
        inputArchivo.name = 'archivo';
        inputArchivo.value = archivoSeleccionado; // Pasa la ruta relativa completa
        form.appendChild(inputArchivo);
        document.body.appendChild(form);
        form.submit();
    }
    cerrarModal('menuContextual');
}

function mover() {
    const modal = document.getElementById('modalMover');
    document.getElementById('moverArchivo').value = archivoSeleccionado;

    // Cargar la lista de carpetas disponibles para mover
    fetch('index.php?listar=1&actual=' + encodeURIComponent('<?= $carpetaRelativa ?>'))
        .then(response => response.json())
        .then(carpetas => {
            const select = document.getElementById('moverDestino');
            select.innerHTML = ''; // Limpiar opciones anteriores
            
            // A√±adir opci√≥n para la ra√≠z
            const optRoot = document.createElement('option');
            optRoot.value = '';
            optRoot.textContent = 'üìÅ Inicio';
            select.appendChild(optRoot);

            carpetas.forEach(carpeta => {
                if (carpeta !== '') { // Ya agregamos la ra√≠z
                    const option = document.createElement('option');
                    option.value = carpeta;
                    option.textContent = 'üìÅ ' + carpeta;
                    select.appendChild(option);
                }
            });
            modal.style.display = 'flex';
        });
    cerrarModal('menuContextual');
}

function eliminar() {
    if (confirm('¬øEst√°s seguro de que quieres eliminar "' + archivoSeleccionado.split('/').pop() + '"?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'eliminar';
        form.appendChild(inputAccion);
        const inputArchivo = document.createElement('input');
        inputArchivo.type = 'hidden';
        inputArchivo.name = 'archivo';
        inputArchivo.value = archivoSeleccionado;
        form.appendChild(inputArchivo);
        document.body.appendChild(form);
        form.submit();
    }
    cerrarModal('menuContextual');
}

function restaurar() {
    if (confirm('¬øEst√°s seguro de que quieres restaurar "' + archivoSeleccionado.split('/').pop() + '" a su ubicaci√≥n original?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'restaurar';
        form.appendChild(inputAccion);
        const inputArchivo = document.createElement('input');
        inputArchivo.type = 'hidden';
        inputArchivo.name = 'archivo';
        inputArchivo.value = archivoSeleccionado;
        form.appendChild(inputArchivo);
        document.body.appendChild(form);
        form.submit();
    }
    cerrarModal('menuContextual');
}

function crearCarpeta() {
    const nombre = prompt('Introduce el nombre de la nueva carpeta:');
    if (nombre) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'crear_carpeta';
        form.appendChild(inputAccion);
        const inputNombre = document.createElement('input');
        inputNombre.type = 'hidden';
        inputNombre.name = 'nueva_carpeta';
        inputNombre.value = nombre;
        form.appendChild(inputNombre);
        document.body.appendChild(form);
        form.submit();
    }
}

function mostrarSubida() {
    document.getElementById('subida').style.display = 'block';
}

function cerrarModal(id) {
    document.getElementById(id).style.display = 'none';
}

function toggleMenuOrden() {
    const menu = document.getElementById('menuOrden');
    menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
}

// Ocultar men√∫ de orden al hacer clic fuera
document.addEventListener('click', function(event) {
    const menuOrden = document.getElementById('menuOrden');
    const btnOrden = document.querySelector('.btn-top[onclick="toggleMenuOrden()"]');
    if (menuOrden.style.display === 'block' && !menuOrden.contains(event.target) && !btnOrden.contains(event.target)) {
        menuOrden.style.display = 'none';
    }
});

function abrirWhatsapp() {
    window.open('https://web.whatsapp.com/', '_blank');
}


// --- L√≥gica de selecci√≥n m√∫ltiple y botones de Alfred ---
let itemsSeleccionados = []; // Almacena las rutas relativas completas de los √≠tems seleccionados

function seleccionarItem(element) {
    const checkbox = element.querySelector('.selector-item');
    checkbox.checked = !checkbox.checked; // Invertir el estado del checkbox
    actualizarSeleccion(checkbox);
}

document.querySelectorAll('.selector-item').forEach(checkbox => {
    checkbox.addEventListener('click', function(event) {
        event.stopPropagation(); // Evitar que el clic en el checkbox propague al li y lo deseleccione
        actualizarSeleccion(this);
    });
});

function actualizarSeleccion(checkbox) {
    const li = checkbox.closest('li');
    const ruta = checkbox.dataset.ruta;

    if (checkbox.checked) {
        if (!itemsSeleccionados.includes(ruta)) {
            itemsSeleccionados.push(ruta);
            li.classList.add('seleccionado');
        }
    } else {
        itemsSeleccionados = itemsSeleccionados.filter(item => item !== ruta);
        li.classList.remove('seleccionado');
    }
    mostrarOcultarBotonAlfred();
}

function mostrarOcultarBotonAlfred() {
    const btnAlfred = document.getElementById('btnAlfred');
    if (itemsSeleccionados.length > 0) {
        btnAlfred.style.display = 'block';
    } else {
        btnAlfred.style.display = 'none';
    }
}

// Acciones m√∫ltiples
function mostrarModalMoverMultiple() {
    if (itemsSeleccionados.length === 0) {
        alert('Por favor, selecciona al menos un elemento para mover.');
        return;
    }
    const modal = document.getElementById('modalMoverMultiple');
    document.getElementById('moverMultipleArchivos').value = JSON.stringify(itemsSeleccionados);

    // Cargar la lista de carpetas disponibles para mover
    fetch('index.php?listar=1&actual=' + encodeURIComponent('<?= $carpetaRelativa ?>'))
        .then(response => response.json())
        .then(carpetas => {
            const select = document.getElementById('moverMultipleDestino');
            select.innerHTML = ''; // Limpiar opciones anteriores
            
            // A√±adir opci√≥n para la ra√≠z
            const optRoot = document.createElement('option');
            optRoot.value = '';
            optRoot.textContent = 'üìÅ Inicio';
            select.appendChild(optRoot);

            carpetas.forEach(carpeta => {
                if (carpeta !== '') { // Ya agregamos la ra√≠z
                    const option = document.createElement('option');
                    option.value = carpeta;
                    option.textContent = 'üìÅ ' + carpeta;
                    select.appendChild(option);
                }
            });
            modal.style.display = 'flex';
        });
}

function eliminarMultiple() {
    if (itemsSeleccionados.length === 0) {
        alert('Por favor, selecciona al menos un elemento para eliminar.');
        return;
    }
    if (confirm('¬øEst√°s seguro de que quieres eliminar ' + itemsSeleccionados.length + ' elementos seleccionados?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'eliminar_multiple';
        form.appendChild(inputAccion);
        const inputArchivos = document.createElement('input');
        inputArchivos.type = 'hidden';
        inputArchivos.name = 'archivos_json';
        inputArchivos.value = JSON.stringify(itemsSeleccionados);
        form.appendChild(inputArchivos);
        document.body.appendChild(form);
        form.submit();
    }
}

function restaurarMultiple() {
    if (itemsSeleccionados.length === 0) {
        alert('Por favor, selecciona al menos un elemento para restaurar.');
        return;
    }
    if (confirm('¬øEst√°s seguro de que quieres restaurar ' + itemsSeleccionados.length + ' elementos seleccionados a su ubicaci√≥n original?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'index.php';
        const inputAccion = document.createElement('input');
        inputAccion.type = 'hidden';
        inputAccion.name = 'accion';
        inputAccion.value = 'restaurar_multiple';
        form.appendChild(inputAccion);
        const inputArchivos = document.createElement('input');
        inputArchivos.type = 'hidden';
        inputArchivos.name = 'archivos_json';
        inputArchivos.value = JSON.stringify(itemsSeleccionados);
        form.appendChild(inputArchivos);
        document.body.appendChild(form);
        form.submit();
    }
}

</script>
</body>
</html>